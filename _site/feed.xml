<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/* HACK */</title>
    <description>Jekyll Theme Demo
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Jun 2017 11:09:52 -0600</pubDate>
    <lastBuildDate>Thu, 08 Jun 2017 11:09:52 -0600</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>tldr; Security</title>
        <description>&lt;h2&gt;See something? Say something!&lt;/h2&gt;

&lt;p&gt;In light of recent security headlines- notably &lt;a href=&quot;https://en.wikipedia.org/wiki/WannaCry_ransomware_attack&quot;&gt;the global ransomware virus&lt;/a&gt; and &lt;a href=&quot;https://www.theverge.com/2017/5/3/15534768/google-docs-phishing-attack-share-this-document-with-you-spam&quot;&gt;the fake google doc phishing attack&lt;/a&gt;, both of which happened this week, and &lt;a href=&quot;https://www.incapsula.com/blog/malware-analysis-mirai-ddos-botnet.html&quot;&gt;the large scale DDoS&lt;/a&gt; (distributed denial of service) attack earlier this year- I&amp;#39;ve heard a lot of security advice that I completely disagree with, so here are my two cents on the best/easiest way to keep your machines safe:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Keep your machine updated!&lt;/strong&gt; This means that when your computer says &amp;quot;should I install updates?&amp;quot; you say YES! If you do nothing else, do this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Use a password manager.&lt;/strong&gt; I use &lt;a href=&quot;https://1password.com/&quot;&gt;1password&lt;/a&gt;, but if you want a free password manager I would try &lt;a href=&quot;https://www.lastpass.com/&quot;&gt;lastpass&lt;/a&gt;. Password managers are a &lt;em&gt;great&lt;/em&gt; idea- more on this in a minute! It only takes an hourish to set up, and after that it takes no extra time or effort and provide &lt;em&gt;a lot&lt;/em&gt; of security- totally worth it!&lt;/p&gt;

&lt;p&gt;Those are the big ones. I&amp;#39;ll talk about other useful/easy security things you can do a little lower on the page, but if that&amp;#39;s all you wanted to read, please just keep your machine up-to-date and set up a password manager!&lt;/p&gt;

&lt;h1&gt;Why?&lt;/h1&gt;

&lt;h3&gt;Keeping a patched machine&lt;/h3&gt;

&lt;p&gt;So here&amp;#39;s the thing about the &lt;a href=&quot;https://en.wikipedia.org/wiki/WannaCry_ransomware_attack&quot;&gt;WANNACRY ransomware attack&lt;/a&gt; this weekend- it was a vulnerability that Microsoft knew about and had patched weeks ago. The computers that were affected (reportedly 75,000 of them!!) were not updated or running a very old operating system. The difference between being vulnerable in a large attack and being immune could be updating your machine, and it&amp;#39;s really easy to do, so please please do it.&lt;/p&gt;

&lt;p&gt;For the same reason it&amp;#39;s important to be using an actively maintained operating system. Sometimes it&amp;#39;s not possible to update your operating system because of software dependencies or old hardware, but if you can&amp;#39;t update your operating system you&amp;#39;re putting yourself at risk. For instance, Microsoft released &lt;a href=&quot;https://technet.microsoft.com/en-us/library/security/mt637763.aspx&quot;&gt;155 security updates last year&lt;/a&gt;; so unless you have a &lt;em&gt;really&lt;/em&gt; good reason, you should be using an officially maintained operating system.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how that attack worked: there was a bug in a Windows internet protocol, and this bug allowed attackers to 1) get access to the machine through the internet, and 2) get administrator privileges on the machine. This allows the attackers to encrypt all the files on the hard drive and ransom them.&lt;/p&gt;

&lt;p&gt;All programs have bugs; many large important programs like operating systems have important, exploitable security bugs. That&amp;#39;s just the way it is. Security is really hard to get air-tight correct, and to err is human. There are many people who are actively looking for these bugs, and many companies will pay rewards for telling them about serious bugs first so that they can fix them.&lt;/p&gt;

&lt;p&gt;When a security vulnerability is made public, like the one in this ransomware attack was a few weeks ago, the affected software companies publish a patch that fixes the bug as soon as possible (often as the bug is being publicly disclosed). You can&amp;#39;t protect against bugs that haven&amp;#39;t been disclosed, but it&amp;#39;s reckless to not protect against bugs that have been patched; that&amp;#39;s why it&amp;#39;s really important to keep your machine updated. Meaning that if you haven&amp;#39;t updated your machine in a year, all the relevant security bugs that have been found in the last year could be used against you.&lt;/p&gt;

&lt;h3&gt;Passwords&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Q: Do I need to use a different password for every website?&lt;/strong&gt;
&lt;strong&gt;A: Yes&lt;/strong&gt;, and using a &lt;strong&gt;password manager&lt;/strong&gt; makes this really easy. I use &lt;a href=&quot;https://1password.com/&quot;&gt;1password&lt;/a&gt; to generate a different random password for every website I use.&lt;/p&gt;

&lt;p&gt;You need to use unique passwords because sites that store your password get attacked, and &lt;a href=&quot;http://fortune.com/2016/05/18/linkedin-breach-passwords-most-common/&quot;&gt;your password might get leaked&lt;/a&gt;. Using unique passwords minimizes damage by keeping your other accounts secure. If you use a different password for each site there&amp;#39;s no reason to change all your passwords just because one gets hacked. If, on the other hand, you use the same password for every site and any of them get hacked, then the attacker can try logging into all your other accounts with that password. That&amp;#39;s why it&amp;#39;s really important to use unique passwords, and again, if you use a password manager having different passwords is effortless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: What makes a secure password?&lt;/strong&gt;
&lt;strong&gt;A: Length is the most important part of a secure password.&lt;/strong&gt; 4+ unrelated words or a long string of random characters will be more effective than replacing letters with symbols or numbers or changing your short password often.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how an attacker hacks your password: they guess-and-check your password as many times as they want in an automated way. They&amp;#39;ll try every word in the dictionary, and variations of every word, to see if that was your password.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the problem with replacing characters in your password with numbers of special characters (like changing &lt;code&gt;&amp;quot;pancake&amp;quot;&lt;/code&gt; into &lt;code&gt;&amp;quot;p@ncak3&amp;quot;&lt;/code&gt;): password hackers also know these rules. They can check various spellings of words in their dictionaries. Using these replacements makes their job a little bit harder, but not much.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s a better strategy: &lt;a href=&quot;https://xkcd.com/936/&quot;&gt;pick 4+ unrelated words&lt;/a&gt;. Again, password managers can do this for you. I just popped mine open and it suggested &amp;quot;folio lapel timely earwig lentil&amp;quot;. This is a better strategy because each extra word you use makes the search exponentially more difficult (since there are way more english words than common character replacement options), so this is a &lt;em&gt;much&lt;/em&gt; better defense than random character replacement.&lt;/p&gt;

&lt;p&gt;Another good strategy is using a long string of random characters. Again that becomes exponentially harder to hack with every additional character, and a password manager can automagically generate &amp;amp; manage this for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Okay, but won&amp;#39;t a long password be annoying to type in?&lt;/strong&gt;
A: Password managers &lt;strong&gt;automatically fill in&lt;/strong&gt; your passwords!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: What if I need to login on my phone?&lt;/strong&gt;
A: Depends on the password manager, but &lt;strong&gt;1password is really easy to use from my phone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: But what if something catastrophic happens to my password manager? Will I be locked out of everything?&lt;/strong&gt;
&lt;strong&gt;A: Know your gmail password for redundancy.&lt;/strong&gt; I have a lot of faith in my password manager, but I&amp;#39;m also prepared in case something goes terribly wrong and I can&amp;#39;t access my passwords. My solution is I remember my gmail password; I can always reset all my other accounts&amp;#39; passwords from my gmail. (This is exactly the reason it&amp;#39;s especially important to have a strong gmail password!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t keep a passwords.txt file.&lt;/strong&gt; If you&amp;#39;ve got a plaintext file on your computer where you write down all your passwords, that&amp;#39;s basically exactly what a password manager does BUT a password manger will also encrypt your passwords so they&amp;#39;re safe against attackers, generate strong passwords for you, and automatically fill them into webforms!&lt;/p&gt;

&lt;p&gt;In conclusion, password managers are great and &lt;em&gt;so&lt;/em&gt; worth the effort of setting them up! Invest in a password manager today!&lt;/p&gt;

&lt;h1&gt;More security advice&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;3) Phishing attacks are very effective, and hard to protect against.&lt;/strong&gt; A phishing attack often looks like someone sending you an email that has a malicious attachment. The problem is that these attacks are often sophisticated- they may look like an email from someone in your contacts list, or from a social media site- but actually they&amp;#39;re from an attacker trying to get you to click a link or download a virus. In my experience gmail is pretty good, but not perfect, at filtering these from your inbox; be very suspicious of any email that seems surprising or that you weren&amp;#39;t expecting.&lt;/p&gt;

&lt;p&gt;One thing that helps protect against phishing attacks is always showing file extensions. Here&amp;#39;s how to set that up &lt;a href=&quot;https://support.microsoft.com/en-us/help/865219/how-to-show-or-hide-file-name-extensions-in-windows-explorer&quot;&gt;on windows&lt;/a&gt; and &lt;a href=&quot;https://support.apple.com/kb/PH25381?locale=en_US&quot;&gt;on mac&lt;/a&gt;. This will let you know whether that &lt;code&gt;puppy.jpg&lt;/code&gt; file is secretly a &lt;code&gt;puppy.jpg.exe&lt;/code&gt; executable virus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Backup your machine.&lt;/strong&gt; This is pretty easy, &lt;a href=&quot;https://support.apple.com/mac-backup&quot;&gt;especially on a mac&lt;/a&gt;. The benefit of backing up your machine is that if you do get a ransomware virus that encrypts all your files, you can say fuck you, reinstall your OS and restore from backup. They can&amp;#39;t ransom your files because you&amp;#39;ve got your files. This also means you won&amp;#39;t lose all your files if someone walks away with your laptop bag at a restaurant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Turn on hard disk encryption.&lt;/strong&gt; If your hard disk is encrypted then if someone steals your laptop, your data is all garbled and therefore safe. I&amp;#39;m including it mostly because it is &lt;em&gt;so&lt;/em&gt; &lt;a href=&quot;https://support.apple.com/en-us/HT204837&quot;&gt;easy to do on a Mac&lt;/a&gt; that there&amp;#39;s no reason not to do it. You can also encrypt &lt;a href=&quot;https://www.howtogeek.com/141953/how-to-encrypt-your-android-phone-and-why-you-might-want-to/&quot;&gt;Android phones&lt;/a&gt; and encryption is on by default for newer iPhones (and &lt;a href=&quot;https://ssd.eff.org/en/module/how-encrypt-your-iphone&quot;&gt;you can turn it on&lt;/a&gt; on older iPhones).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Use 2 factor authentication.&lt;/strong&gt; 2-Factor Authentication means that to log into an account you need to &amp;quot;know something&amp;quot; (your password) and also &amp;quot;have something&amp;quot; (usually your phone). If someone tries to log into your account from some weird non-trusted computer, the site will send a message to your phone asking if that was really you- and let the person into your account only if you say &amp;quot;yup, that&amp;#39;s me!&amp;quot; You can set up 2-factor for lots of popular sites like gmail, amazon, dropbox, facebook and  twitter. It&amp;#39;s easy to set up and will go a long way to protecting you against hackers even if they manage to get your password.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Use Privacy Badger &amp;amp; an adblocker.&lt;/strong&gt; &lt;a href=&quot;https://www.eff.org/privacybadger&quot;&gt;Privacy Badger&lt;/a&gt; is a great chrome extension from EFF and it&amp;#39;s a one-stop-shop for lots of great security / privacy settings, and I highly recommend it, especially because it&amp;#39;s so easy to set up. Ads can sometimes be a security problem because they will sometimes run arbitrary javascript which can be malicious.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) Use HTTPS Everywhere.&lt;/strong&gt; HTTPS means you&amp;#39;ve got a secure connection. There&amp;#39;s a really awesome Chrome extension called &lt;a href=&quot;https://www.eff.org/https-everywhere&quot;&gt;HTTPS Everywhere&lt;/a&gt; also from EFF that will make sure you always get the secure version of a website if one exists. This is really really especially important if you&amp;#39;re sending credit card information or downloading anything!&lt;/p&gt;

&lt;p&gt;One caveat: Sometimes one of my chrome extensions will &amp;quot;break&amp;quot; a website, like sometimes webforms don&amp;#39;t work correctly. When this happens I just open the page in incognito mode (which disables all extensions) and continue about my day, no sweat.&lt;/p&gt;

&lt;h3&gt;HTTPS &amp;amp; Downloading anything&lt;/h3&gt;

&lt;p&gt;HTTPS protects you from &amp;quot;man in the middle&amp;quot; attacks. When you connect to a website, you and the website send &amp;quot;packets&amp;quot; of data back and forth which your browser uses to see what the website should look like. You can see all the packets that are flying around on your local network (from everyone connect to the same internet connection as you), so if you&amp;#39;re interacting with a webpage without encryption I can see all the packets that you are sending and receiving.&lt;/p&gt;

&lt;p&gt;This has two problems- 1) I can see your data, and do things like steal your credit card information when you enter it into a website, and 2) if I&amp;#39;m between you and the website I can intercept packets that the website sends to you and modify or replace them. This leads to really nasty attacks where you might think you&amp;#39;re putting your password into a website but you&amp;#39;re actually just handing your password to the man in the middle.&lt;/p&gt;

&lt;p&gt;HTTPS protects you from both of these problems by encrypting your communication between you and the server. This means that if anyone tries to read your messages it just looks like a meaningless jumble, and no one can send you a fake webpage because it&amp;#39;s impossible for them to encrypt it in a way that looks the same as the real website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eff.org/https-everywhere&quot;&gt;HTTPS Everywhere&lt;/a&gt; is a really awesome browser extension that will make sure you&amp;#39;re getting the safe version of webpages you visit and can warn you if you&amp;#39;re on an insecure webpage. It&amp;#39;s great and I think you should get it.&lt;/p&gt;

&lt;p&gt;HTTPs also makes sure you&amp;#39;re getting the download that you asked for, instead of some other file that a man-in-the-middle is handing you. This doesn&amp;#39;t protect you from downloading something that&amp;#39;s a virus; in general I try to be very cautious and selective about what I download. Don&amp;#39;t download anything, especially not executables, from websites you don&amp;#39;t trust, and be careful about links that you open.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9) Your email &amp;amp; phone are the keys to the kingdom.&lt;/strong&gt; One last take-away is that you probably use your email and/or your phone to authenticate all your other accounts. If one of those is compromised, the game is up. This means it is extra important to have a strong secure password on your email, and a screen lock or password on your phone. Using 2-factor authentication on your email will protect it against being hacked even if someone has your email password.&lt;/p&gt;

&lt;h1&gt;In conclusion&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Patch your machine &amp;amp; use a password manager!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Good night &amp;amp; good luck!&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/05/10/tldr-security.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/10/tldr-security.html</guid>
        
        
      </item>
    
      <item>
        <title>Notes from POPL 17</title>
        <description>&lt;h1&gt;Flow Tutorial&lt;/h1&gt;

&lt;p&gt;I really enjoyed Avik Chaudhuri&amp;#39;s tutorial on the js static typechecker, flow. My over-all impression is that flow is pretty production ready- he mentioned that roughly 65% of facebook’s code is now annotated with flow.&lt;/p&gt;

&lt;h4&gt;Soundness&lt;/h4&gt;

&lt;p&gt;Interestingly, they designed parts of the typesystem to be unsound &lt;em&gt;intentionally&lt;/em&gt; because javascript is so sticky that getting it “right” would not be very practical with existing code. An example of this is that in js, you can call a function with extra parameters: for instance I have a function &lt;code&gt;cat(age)&lt;/code&gt;. It is valid for me to call it &lt;code&gt;cat(10, 15, “hello”)&lt;/code&gt;. While this should strike fear in your heart, flow does not mark this as an error. This isn’t a totally esoteric example, this is one idiomatic way to handle optional arguments in js- this convention appears in a lot of existing code, so it’s not very practical to have this marked as an error.&lt;/p&gt;

&lt;h4&gt;Efficiency&lt;/h4&gt;

&lt;p&gt;Flow needs to be efficient because facebook’s projects are really large, and developers won’t use it if it interfere with their development process. Flow is distributed in a master/workers model, except to avoid causing the master to be a bottleneck, they use a shared memory heap. Each worker knows what part of the heap it gets to write to/ read from- efficiently creating a masterless master/worker model! Super cool.&lt;/p&gt;

&lt;h4&gt;Error Reporting: Non-Trivial&lt;/h4&gt;

&lt;p&gt;It turns out that error reporting is tricky because 1) you might have all sorts of errors which stem from a single mistake, and you need a way to choose which error is the most important to display (it&amp;#39;s type errors), and 2) type inference might fail not exactly where the offending method was called/ implemented. This led me to a really awesome paper called &lt;a href=&quot;https://www.cs.cornell.edu/andru/papers/diagnostic/popl14.pdf&quot;&gt;“Toward General Diagnosis of Static Errors” (Zhang &amp;amp; Myers)&lt;/a&gt; in which they used Bayesian inference to learn the “best” place to blame for the error.&lt;/p&gt;

&lt;h1&gt;PLMW&lt;/h1&gt;

&lt;h4&gt;Typed Assembly Language&lt;/h4&gt;

&lt;p&gt;I was amazed to learn that a typed assembly language existed at all, but someone has thought it up! In fact, Stephanie Weirich, who was one of the keynote speakers, &lt;a href=&quot;https://github.com/sweirich/tal&quot;&gt;has an implementation of it on github&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h4&gt;You should probably say no.&lt;/h4&gt;

&lt;p&gt;Kathleen Fisher gave a great talk that I think could be summarized as, if you want to be happy as a researcher you’re going to need to say no to commitments you don’t have time for, and get out of commitments you already agreed to if the going gets too bad. It’s way better to say no than to do a bad job.&lt;/p&gt;

&lt;h4&gt;Abductive reasoning&lt;/h4&gt;

&lt;p&gt;Isil Dilling gave a talk titled, “Abductive Reasoning in Deductive Verification”, but what really fascinated me was that she was using abduction at all, because as far as I knew abduction was logically unsound. I believe the trick was that they used abduction to generate hypothesis and then deduction (which is sound) to verify it before accepting the hypothesis. Interesting.&lt;/p&gt;

&lt;h4&gt;Reading papers&lt;/h4&gt;

&lt;p&gt;Michael Hicks suggested reading papers by reading the abstract, intro, section headers and conclusion. I usually do the first three without getting to the conclusion, but in retrospect, yes, reading the conclusion is a better plan.&lt;/p&gt;

&lt;h4&gt;jsnice is so cool&lt;/h4&gt;

&lt;p&gt;Martin Vechev gave a talk I was especially interested in about PL meets ML. One example was &lt;a href=&quot;http://jsnice.org/&quot;&gt;jsnice&lt;/a&gt;, which takes mini-ified java script code and makes it readable by reindenting it, suppling reasonable variable names (!) and adding comments that guess the types. This is a super cool application for structured prediction that’s made possibly by having huge amounts of code on github to train on. Super neat.&lt;/p&gt;

&lt;h4&gt;Gradual typing is not what I thought it was&lt;/h4&gt;

&lt;p&gt;After dinner I walked to the subway with a student working on gradual typing, and he explained one motivation for gradual typing is to construct a wrapper around existing dynamically typed code (python, js, R, etc). We’re stuck with that code, but it would be really nice if we could add typing information because static types are so so useful.&lt;/p&gt;

&lt;h1&gt;POPL&lt;/h1&gt;

&lt;h4&gt;Dependent types in Haskell: Stephanie Weirich’s keynote&lt;/h4&gt;

&lt;p&gt;This was my favorite talk. Also she live-coded in front of 700 people! Damn!&lt;/p&gt;

&lt;p&gt;She motivated the work with an example: imagine you want to implement a filepath regex matcher, and you want static, compile-time type errors if you try to access a part of the filepath that isn’t actually part of the filepath.&lt;/p&gt;

&lt;p&gt;Doing dependent typing in Haskell requires a little bending-over-backwards because types are not first order citizens, which means doing computation with types is a little awkward. Stephanie demonstrated a library called Singleton which automatically [read: painlessly] generates the boilerplate you might want, which wraps types (if you anticipating needing type information at runtime- to say, print to the screen) in a datatype. This reminded me of wrapping methods in objects in Java- a Comparator object, as my intro cs professor called it- to pass a custom comparison function to a sorting function. Clunky.&lt;/p&gt;

&lt;h4&gt;Java generics are Turing complete&lt;/h4&gt;

&lt;p&gt;So you can write arbitrary programs entirely in the java generics type system. How fun.&lt;/p&gt;

&lt;h4&gt;Formal semantics for an editor&lt;/h4&gt;

&lt;p&gt;Cyrus Omar gave a cool talk about the semantics of a drag-and-drop editor called Hazelnut. This is an interesting problem because if a program is wrong or half-written it is simply invalid, but an editor needs to deal with partially complete code because that’s how we write code. The reason an editor wants to have semantics at all is because it can suggest useful hints to the user, like type information. His solution was using holes for incomplete pieces of code like &lt;code&gt;walk_dog(&lt;/code&gt; and syntactically invalid code like &lt;code&gt;walk_dog(True,   )&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Quantified metrics for maintainability&lt;/h4&gt;

&lt;p&gt;I had an interesting conversation about why Haskell isn’t use more pervasively in industry, given from some anecdotal evidence that it would be economical in terms of preventing bugs and improving maintainability. Here are some conclusions: it’s a hard sell that  specific code isn’t maintainable- if there was a way to quantify “this code is a nightmare” it wouldn’t be a discussion. Possibly there isn’t a great domain- haskell is good for sort of “general backend” programming, but if you need a general backend you’ll probably use c++ for maximum perceived performance. It is also rather academic [read: intimidating/ too much effort]- it occurred to me during the dependent type keynote today that you probably won’t be using dependent types unless you’re a PL researcher.&lt;/p&gt;

&lt;h4&gt;Automatic web-server caching&lt;/h4&gt;

&lt;p&gt;The set up is you have many clients querying a server with a database backend. The server/database communication can become a bottleneck, so it becomes pertinent to create a db cache on the cache. The cool thing about their framework is you can add it for free to existing code- you don’t need to annotate or refactor anything. The catch is that it works for the Urweb programming language, and relies on nice language properties- so while it’s a slick idea, it’s not very practical. The idea is that we can parse the queries to determine which entries we need to invalidate.&lt;/p&gt;

&lt;h4&gt;If the subway’s packed, go the other way&lt;/h4&gt;

&lt;p&gt;We were a little late getting in because there was some accident on the line- so when the trains started coming in they were totally packed- like doors-can’t-close full. My hotel roommate, Patience, had the bright idea to ride the line in the opposite direction until a station where the platform wasn’t crowded- and two stations in the wrong direction we caught an empty train that we wouldn’t have even been able to get on at Maison Blanche.&lt;/p&gt;

&lt;h4&gt;Mixed-size concurrency: ARM, Power, C/C++ 11&lt;/h4&gt;

&lt;p&gt;A fixed size memory access means that I have 1 read / 1 write. I write a 64-bit int, I read a 64-bit int. A mixed-size memory access means I have 1 read / multiple writes. An example is packed structs- I think the point here is that it’s cheaper to read memory in larger chunks, so even if you’re dealing with data that can be represented in fewer bits, you’re going to read multiple pieces of data at once. The talk was about the &lt;em&gt;semantics&lt;/em&gt; of what they called “relaxed shared-memory concurrency”- turns out you can run into problems with sequential consistency because if you do these mixed-size reads you might be doing concurrently what is conceptually sequential. This was one of my favorite talks, &lt;a href=&quot;https://www.cl.cam.ac.uk/%7Epes20/popl17/mixed-size.pdf&quot;&gt;here is the paper&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Bidirectional Programming: Read/Parsing &amp;amp; Tardis&lt;/h4&gt;

&lt;p&gt;Bidirectional programming is a neat idea! Imagine you have a parser- shouldn’t you be able to “run it backwards” to get a printer? I haven’t thought through how to make this work, and it possibly doesn’t work for all grammars. The simplest case is very simple though- let’s parse “hello” into 0 :: Int, and “world” into 1 :: Int. We just match on both strings and return 0 or 1. Run backwards we take 0 or 1 and return which string we matched on. I’m not sure how to handle branching and recursive function calls. Cool though!&lt;/p&gt;

&lt;p&gt;The other related thing I learned about is the &lt;a href=&quot;https://hackage.haskell.org/package/tardis-0.4.1.0/docs/Control-Monad-Tardis.html&quot;&gt;Tardis “time-traveling” monad pair&lt;/a&gt;. We can use it to solve the problem “walk a tree, and replace every 3 with the number of 4’s in the tree”. So if the tree was “(3 (3 (4)) (4))” we would want to produce the tree “(2 (2 (4)) (4))”. During one walk of the tree, one monad walks the tree and replaces every 3 with a box to hold the “future value”, while the other counts the number of 4’s, and then sets the “future value”. Neat.&lt;/p&gt;

&lt;h4&gt;Semantic Equivalence between Languages&lt;/h4&gt;

&lt;p&gt;I was excited about this poster because this is something I was thinking about a few months ago! Here’s the problem- I want to write my front-end in js, my network in Go, my backend in Haskell, and the best I can do is either some wizardry with foreign-function-interfaces (which probably makes more sense if C is one of the languages I want to work with!) or piping around in some serialized data like JSON. If I wanted to do something slicker, I would need to translate between the semantics of the languages I wanted to stick together- like I would need to directly translate a C int to a Haskell int, etc. And this is what they’re working on! That’s cool!&lt;/p&gt;

&lt;h4&gt;Rust 101&lt;/h4&gt;

&lt;p&gt;Aaron Turon gave an awesome keynote- I had heard superlative things about Rust’s community, and Aaron sold me on their abstraction. The goal is lofty: minimize the safety / performance trade-off, and no data races! He pitched the motto: &amp;quot;Hack without fear&amp;quot;&lt;/p&gt;

&lt;p&gt;The key idea is “ownership”- there are 3 types of ownerships a variable can have, each of which allows you to do different things with the variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Owned:&lt;/strong&gt; these are variables that you can mutate but you CANNOT alias! This means I &lt;em&gt;know&lt;/em&gt; that I am the only one mutating this variable- and I can pass it off to another function call if I want, but when I do that I hand off ownership to that function. When that function returns, the function pointer is deleted (as well as the data), so I can’t regain ownership, which removes bugs like use-after-free. They call this &amp;quot;region based borrowing&amp;quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Shared Reference:&lt;/strong&gt; these can be aliased by multiple callers but CANNOT be mutated. This is the functional paradigm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Mutable Reference:&lt;/strong&gt; Sometimes you want to have your cake and eat it too: these are mutable temporary loaner variables. They also cannot be aliased- if you have one of these vars, you are guaranteed that it is the only way at that time to access the data it points to. There is some &amp;quot;borrow checking&amp;quot; machinery that happens to make sure this guarantee is upheld.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) A tiny bit of unsafety:&lt;/strong&gt; you can write segments of unsafe code by wrapping them in an unsafe block. The dream is to use this to efficiently implement core Rust libraries, and then scrubbing, polishing and possibly verifying them so that high-level user code can be safe. Having this option to write unsafe code may or may not end in tears in practice- ideally writing safe code will be easier so the laziest path is to just do the safe thing.&lt;/p&gt;

&lt;p&gt;This sets us up to not have race conditions! (At least that&amp;#39;s the claim! There might be some snakes under the rug) The idea is that we get a data race when we have 2 unsynchronized threads accessing the same data and at least 1 thread writes: this is caused because they&amp;#39;re unsynchronously dealing with shared state and mutability, but Rust never allows both at once! &amp;quot;Shared state is not evil... but &lt;em&gt;accidental&lt;/em&gt; shared state is.&amp;quot; The claim is this ownership type system prevents accidentally sharing state.&lt;/p&gt;

&lt;p&gt;I heard murmurs about work needing to be done to theoretically verify these claims (and people working on it!) The devil is probably in the details, but the overall design seemed very solid &amp;amp; impressive. I&amp;#39;m excited for Rust.&lt;/p&gt;

&lt;h4&gt;Industry makes Languages&lt;/h4&gt;

&lt;p&gt;Go? Google. Hack? FB. Swift? Apple. (also LLVM!) Rust? Mozilla.
Not surprisingly, these monolithic companies have their own internal tools teams.&lt;/p&gt;

&lt;h4&gt;An idea: learning Flow annotations&lt;/h4&gt;

&lt;p&gt;After hearing the flow tutorial &amp;amp; learning about jsnice, I was wondering about whether it was possible to learn flow annotations. If you&amp;#39;ve got a really big code base to learn from, and at least a small amount of labeled data, maybe you could do some semi-supervised learning to automatically annotate the rest of the codebase. It&amp;#39;s possible that the level of detail of type information needed for flow to be successful will make this challenging.&lt;/p&gt;

&lt;h4&gt;Concurrent Parallel Functional Arrays- with common O(1-ish) ops&lt;/h4&gt;

&lt;p&gt;This talk was so packed that I had to sit on the stairs! This was a nice idea about doing arrays functionality: imagine you have a mutable array. Now when you mutate an entry, instead of just changing it, we update to the new value and push the old value out into a linked list- like we would for a hashtable collision. Concretely, say we have [0, 1, 2], and I want to change 0 to be 4 then I&amp;#39;d get: [4 -&amp;gt; 0, 1, 2]. Okay, there&amp;#39;s one more detail because that doesn&amp;#39;t get us persistence: each piece of data is annotated with a version stamp. So the original array was v.0, and the updated array is v.1. When I request the array, I request it with a version number- so I&amp;#39;m always getting the right one! This scales nicely to concurrent code.&lt;/p&gt;

&lt;h4&gt;Adding dynamic type checks to python&lt;/h4&gt;

&lt;p&gt;I talked with someone working on gradual typing for python who has a system to automatically add runtime type checks (assert that x is a string) to existing python code. That&amp;#39;s pretty cool- if things have gone all pear-shaped we should really crash, because if we continue executing instead that&amp;#39;s an opportunity for an exploit.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/01/20/popl.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/20/popl.html</guid>
        
        
      </item>
    
      <item>
        <title>LLVM Optimizations</title>
        <description>&lt;h1&gt;What you see is not what you get&lt;/h1&gt;

&lt;p&gt;LLVM is the Low Level Virtual Machine. It&amp;#39;s a compiler backend- the deal is you compile your fancy high level language to a high level assembly and hand that off to LLVM. This high level assembly is the LLVM Intermediate Representation (IR). LLVM handles a bunch of optimizations and then compiles to machine code for whatever hardware platform you want. This is what VM&amp;#39;s do (think Java)- they give you portability across hardware &amp;amp; operating systems. LLVM&amp;#39;s assembly language is in Static Single Assignment form &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_single_assignment_form&quot;&gt;(SSA)&lt;/a&gt; because it was originally made with C and C++ in mind, but lots of other production languages, even functional ones like Haskell, Julia, Python (Numba), and Rust have compilers that target LLVM! You can &lt;a href=&quot;http://llvm.org/docs/FAQ.html#i-d-like-to-write-a-self-hosting-llvm-compiler-how-should-i-interface-with-the-llvm-middle-end-optimizers-and-back-end-code-generators&quot;&gt;roll your own compiler to target LLVM&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/redllvmdragon.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s really awesome because it means that if you want to write a language, LLVM modularizes your concerns: you stick to getting the language details right, and let someone else handle the assembly generation! You don&amp;#39;t have to handle &lt;a href=&quot;https://fgiesen.wordpress.com/2016/08/25/how-many-x86-instructions-are-there/&quot;&gt;the nitty gritty of x86&lt;/a&gt; or ARM or whatever other instruction set, and you don&amp;#39;t have to write &lt;a href=&quot;http://llvm.org/docs/Passes.html#transform-passes&quot;&gt;common optimizations&lt;/a&gt;. Any day you don&amp;#39;t have to unroll loops yourself is a good day.&lt;/p&gt;

&lt;h2&gt;Okay, so what&amp;#39;s the plan?&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re going to look at 3 different implementations of gcd. In fact, they&amp;#39;re &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_algorithm&quot;&gt;literally the 3 implementations suggested by wikipedia&lt;/a&gt;, transcribed into C code.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re going to look at the LLVM IR code emitted by Clang, a C compiler. Then we&amp;#39;re going to run this IR through the LLVM optimizer- and it&amp;#39;s going to try about 100 different optimization passes! - and see how they compare.&lt;/p&gt;

&lt;p&gt;If you want to follow along I&amp;#39;ve put all the code in &lt;a href=&quot;https://github.com/anniecherk/code_for_website/tree/master/llvm_optimizations&quot;&gt;this repo&lt;/a&gt;, but you also need to grab an precompiled LLVM binary. More instructions below! You could even grab this code as a starting point to look at how LLVM optimizes your own code! But only if reading assembly is your idea of fun ;)&lt;/p&gt;

&lt;p&gt;Okay, onwards!&lt;/p&gt;

&lt;h2&gt;Following Along&lt;/h2&gt;

&lt;p&gt;1) Grab the repo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/anniecherk/code_for_website
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This repo just has the 3 euclidean algorithm implementations from wikipedia, and all the generated IR.&lt;/p&gt;

&lt;p&gt;2) Grab a &lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;precompiled LLVM binary&lt;/a&gt; (I used 3.9.0), and untar it&lt;/p&gt;

&lt;p&gt;3) Add the LLVM binaries to your path:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LLVM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;wherever you unpacked the llvm files&amp;gt;/clang+llvm-3.9.0-x86_64-apple-darwin/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;** or whatever the file is called on your OS, and then add it to your path:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LLVM&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4) Get the naiive IR by running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;clang -S -emit-llvm gcd1.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This saves it to a file called &lt;code&gt;&amp;lt;filename&amp;gt;.ll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5) Get the fancy optimized IR by running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;opt -O2 -print-after-all gcd1.ll 2&amp;gt; opt_gcd1.ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(We use &lt;code&gt;2&amp;gt;&lt;/code&gt; because &lt;code&gt;-print-after-all&lt;/code&gt; helpfully prints details of all the passes to stderr, so that&amp;#39;s what we&amp;#39;re redirecting to file).
You can also pick and choose &lt;a href=&quot;http://llvm.org/docs/Passes.html&quot;&gt;which optimizations you want&lt;/a&gt; instead of running the prepackaged O2 bundle.&lt;/p&gt;

&lt;h2&gt;Okay, what we looking at?&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve got our 3 gcd functions:
&lt;img src=&quot;/images/screen-shot-2016-11-17-at-11.41.19-am.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;What you might want to know when LLVM assembly&lt;/h3&gt;

&lt;p&gt;We&amp;#39;re going to look at the LLVM IR in just a hot sec, but first here are some things that might be helpful to know:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i32&lt;/code&gt; is a 32 bit integer, &lt;code&gt;i1&lt;/code&gt; is a 1 bit boolean. Remember this is just the LLVM IR- what this gets physically mapped to depends on your hardware, and decisions that the backends make!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alloca&lt;/code&gt; allocates space on the stack that gets released when the function returns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;srem&lt;/code&gt; is the signed remainder instruction.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sub nsw&lt;/code&gt; is subtraction with No Signed Wrap. This means that if the subtraction underflows the value is poisoned! (How dramatic!)&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the LLVM IR that Clang compiles them to. Ready for a screenful of assembly code? Don&amp;#39;t worry, we&amp;#39;ll talk about it after!
&lt;img src=&quot;/images/llvm_ir.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s some interesting things to notice about the above code!&lt;/p&gt;

&lt;h3&gt;Clang did some optimization!&lt;/h3&gt;

&lt;p&gt;The assembly for gcd1 and gcd3 is identical! That&amp;#39;s really cool! This means that Clang figured out that the recursion in gcd3 could be rewritten as the while loop in gcd1.&lt;/p&gt;

&lt;p&gt;I think the lesson here is that optimization happens on so many levels- you can optimize your high level code, but the front-end compiler like Clang will also try to optimize it, then LLVM will try to optimize the IR, the various backends &lt;a href=&quot;https://en.wikipedia.org/wiki/FMA_instruction_set&quot;&gt;will try to optimize the machine specific code&lt;/a&gt;. And finally, &lt;a href=&quot;https://en.wikipedia.org/wiki/Hyper-threading&quot;&gt;your hardware is optimized&lt;/a&gt; in lots of really awesome ways!&lt;/p&gt;

&lt;p&gt;This means that by the time your C code is actually passed to hardware as, say x86, it&amp;#39;s been written and rewritten by many hands. This is, of course, both a blessing and a burden. On one hand, this modularization is both absolutely necessary and also delightful. You don&amp;#39;t have time to be an expert at everything, and you probably don&amp;#39;t want to be. On the other hand, it&amp;#39;s that many more opportunities for bugs. What you see is not what you get.&lt;/p&gt;

&lt;p&gt;Okay, back to the IR!&lt;/p&gt;

&lt;h3&gt;SSA and The Disposable Variable&lt;/h3&gt;

&lt;p&gt;Okay, so see all the &lt;code&gt;%1 = ..., %2 = .., %3 = ...&lt;/code&gt;, etc assignments? Recall that SSA is Static Single Assignment- this is the single assignment part! In the LLVM IR we have an infinite number of registers, so we never need to reuse them. This makes lots of analyses much easier because you don&amp;#39;t have to worry about when which registers change! The backends handle mapping to physical registers so.. its someone else&amp;#39;s problem :)&lt;/p&gt;

&lt;p&gt;Notice that the labels also have unique numbers- and even though the IR for gcd1 and gcd3 is identical the numbers on the labels are slightly different! (ie, &lt;code&gt;; &amp;lt;label&amp;gt;:9: vs ; &amp;lt;label&amp;gt;:10:&lt;/code&gt;)My guess is that Clang first generated label numbers, and then optimized away one of the blocks in gcd3.&lt;/p&gt;

&lt;h3&gt;SSA and The Basic Block&lt;/h3&gt;

&lt;p&gt;Now look at how the IR is organized- we&amp;#39;ve got a bunch of blocks of code that start with &lt;code&gt;; &amp;lt;label&amp;gt;:6:&lt;/code&gt; and end with &lt;code&gt;br label %somenumber&lt;/code&gt;. Each of these is a basic block. Basic blocks have two rules- there&amp;#39;s only one way in (first line of the block), and one way out (last line of the block- though the way out can be conditional, like a branch!) This control flow does NOT fall through- we always explicitly say where we jump to when we&amp;#39;re done with a given block.&lt;/p&gt;

&lt;h3&gt;SSA and Phi Nodes&lt;/h3&gt;

&lt;p&gt;The IR that Clang emitted doesn&amp;#39;t have &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_single_assignment_form#Converting_to_SSA&quot;&gt;phi nodes&lt;/a&gt;... but we&amp;#39;ll see them in the IR emitted by LLVM so let&amp;#39;s just chat about them now. Phi nodes are how we deal with control flow in SSA. Consider a simple if statement:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;some_function_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
When we get to the code at the bottom of the if statement, we need to know which value of y we need to use, and we signify that the control flow &lt;em&gt;merges&lt;/em&gt; back together with a phi node. The phi node goes at the top of the basic block, and selects the correct value for y.&lt;/p&gt;

&lt;h2&gt;Okay finally! The optimizations!&lt;/h2&gt;

&lt;p&gt;Since Clang compiled gcd1 and gcd3 to the same IR, we&amp;#39;ll just look at what optimizations LLVM can pull out of gcd1 and gcd2.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re going to look at side-by-side diffs of the IR for the two functions. I&amp;#39;m just warning you because you&amp;#39;re about to get screenfuls of assembly again. Ready?&lt;/p&gt;

&lt;p&gt;Hold your nose cause here goes the cold water...&lt;/p&gt;

&lt;p&gt;First up! gcd1!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gcd1_optimizations.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;#39;s gd2!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gcd2_optimizations.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Things to notice&lt;/h3&gt;

&lt;p&gt;There are those phi nodes we talked about! We also got rid of all the alloca&amp;#39;s, and our labels got split into a preheader, outer, and two outer critcal edge loop exits.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s talk Passes&lt;/h3&gt;

&lt;p&gt;Okay, so here&amp;#39;s how LLVM optimizations work. When we run the O2 optimization level, this represents a bunch of small optimization passes. (Or, we can select which specific optimizations we want via commandline flags.) An optimization pass either changes something about the IR, or maybe it just collects and annotates information for other passes to use. This means that order matters! Some passes are run lots of times!  You &lt;a href=&quot;http://llvm.org/docs/Passes.html&quot;&gt;can see all the passes LLVM can do&lt;/a&gt; and you can even write your own!&lt;/p&gt;

&lt;p&gt;There&amp;#39;s way more cool stuff to say about LLVM&amp;#39;s passes than I want to spend time on here, but &lt;a href=&quot;http://llvm.org/devmtg/2014-04/PDFs/Talks/Passes.pdf&quot;&gt;here&lt;/a&gt; is a really great slidedeck.&lt;/p&gt;

&lt;h2&gt;Which passes optimized our code?&lt;/h2&gt;

&lt;p&gt;Glad you asked!&lt;/p&gt;

&lt;h3&gt;SROA: Scalar Replacement of Aggregates&lt;/h3&gt;

&lt;p&gt;The very first thing that ran was SROA, the goal of which is to get rid of alloca&amp;#39;s. All the alloca&amp;#39;s got replaced with phi nodes! That&amp;#39;s where they all came from...&lt;/p&gt;

&lt;h3&gt;Loop-Closed SSA Form&lt;/h3&gt;

&lt;p&gt;Added an extra phi node- this is one of the annotation passes, it adds phi nodes for every &amp;#39;live&amp;#39; variable at the end of the basic block because this might expose optimizations done by other passes.&lt;/p&gt;

&lt;h3&gt;Rotate Loops&lt;/h3&gt;

&lt;p&gt;This is what architecture calls &amp;#39;software pipelining&amp;#39;. If your loop does thingA and then thingB, you can move thingA out above the loop, then &amp;#39;rotate&amp;#39; the loop so it looks like thingB and then thingA.. and then do some cleanup. I assume this is also done in search of more optimizations.&lt;/p&gt;

&lt;h3&gt;Simplify the CFG (Control Flow Graph)&lt;/h3&gt;

&lt;p&gt;In general, simplyifycfg is responsible for gutting dead code, and combining basic blocks that can combined. This pass introduced the ._crit_edge: label.&lt;/p&gt;

&lt;h3&gt;Canonicalize Natural Loops&lt;/h3&gt;

&lt;p&gt;This pass introduced the preheader and loopexit labels. In general, this pass turns loops into a more structured canonical form which exposes them to other optimizations. This fits consistently with LLVM&amp;#39;s pass strategy: canonicalize, simplify, lower.&lt;/p&gt;

&lt;h3&gt;Global Variable Numbering&lt;/h3&gt;

&lt;p&gt;This pass got rid of one of the phi nodes that closed loop SSA form introduced. At least we&amp;#39;re netting zero?&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/11/10/LLVM-optimizations.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/10/LLVM-optimizations.html</guid>
        
        
      </item>
    
      <item>
        <title>Return Statement</title>
        <description>&lt;h1&gt;6 weeks at the Recurse Center&lt;/h1&gt;

&lt;p&gt;I just finished attending a 6 week half-batch of the Recurse Center (RC), and partaking in a reflective RC tradition, this is my Return Statement.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s RC? It&amp;#39;s self described as a writers retreat, but for programmers. It&amp;#39;s this big room in downtown Manhattan where roughly 60 people show up every day and sit around and program and talk about programming.&lt;/p&gt;

&lt;p&gt;Looking back a few weeks later: I&amp;#39;m glad I did RC. If you&amp;#39;ve found this post because you&amp;#39;re thinking of applying, then &lt;a href=&quot;https://www.recurse.com/&quot;&gt;please do&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Updated Jun 2017 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;p&gt;Looking back a year after my batch, I have nothing but nice things to say about RC. It&amp;#39;s a great community.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;What I did for six weeks&lt;/h2&gt;

&lt;p&gt;I spent six weeks honing my Haskell skills. I fixed a tiny bug in GHC, I implemented some functional data structures, I gave a presentation on Quickcheck, I looked a little into language extensions. I also collaborated with a lot of people on a lot of very different things- from Elm, to C, to OCaml, to Rust, one hour curiosities to multi-day adventures.&lt;/p&gt;

&lt;p&gt;I spent the first couple weeks looking at functional (persistent) data structures with &lt;a href=&quot;https://phasedchirp.github.io/&quot;&gt;Sean Martin&lt;/a&gt;. We &lt;a href=&quot;https://github.com/anniecherk/functional-data-structures-experiments&quot;&gt;implemented&lt;/a&gt; functional queues, priority queues implemented with skew heaps, and finger trees.&lt;/p&gt;

&lt;p&gt;I also paired with &lt;a href=&quot;https://github.com/lamarqua&quot;&gt;Adrien Lamarque&lt;/a&gt; on a fabulously silly project we called &lt;a href=&quot;https://github.com/lamarqua/hasquelle&quot;&gt;La Hasquelle&lt;/a&gt; which is a find-and-replace haskell keyword translator. Why would you want this? So you can live code in other languages! Bonjour monde!&lt;/p&gt;

&lt;p&gt;I briefly looked into Elm by pairing with &lt;a href=&quot;https://github.com/jjst&quot;&gt;Jérémie Jost&lt;/a&gt; on an &lt;a href=&quot;https://github.com/jjst/elmtimate-tictactoe&quot;&gt;Elm-timate tic-tac-toe&lt;/a&gt; game he was working on. I also participated in weekly &amp;quot;code dojos&amp;quot; where we would take an hour to pair program something like a hackerrank problem, mostly working with &lt;a href=&quot;https://github.com/mariellefoster&quot;&gt;Marielle Foster&lt;/a&gt;. That was awesome to practice algorithms, see lots of other different ways to solve the same problem- and see some really cool visualizations! I spent one morning learning enough OCaml to do a problem.&lt;/p&gt;

&lt;p&gt;My big &amp;quot;what I did with my summer break essay&amp;quot; project I did at RC was I &lt;a href=&quot;http://anniecherkaev.com/projects/contributing-to-ghc&quot;&gt;contributed to GHC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I spent the last couple days of my batch making a website... after watching a few long videos on css and php.&lt;/p&gt;

&lt;p&gt;After spending six weeks coming in every day and programming whatever I thought was interesting, I came to to comfortable conclusion, that yes, I really did in fact like programming. I didn&amp;#39;t end up here by accident, I ended up here by choice.&lt;/p&gt;

&lt;h2&gt;Post-batch&lt;/h2&gt;

&lt;p&gt;One really unexpected and wonderful thing about RC is that after your batch you can stay connected on a big internal forum- and this forum is completely full of: interesting very technical conversations, people who can help you out if you&amp;#39;re stuck with a bug or need a recommendation for some tools, and links to interesting articles, written by recursers and beyond. I can pretty frequently say that the most interesting thing that I learned in a given day was from a link I found through RC.&lt;/p&gt;

&lt;p&gt;Post-batch, I&amp;#39;m excited to be participating as a mentor in &lt;a href=&quot;https://www.recurse.com/blog/99-free-one-on-one-mentorship-for-new-programmers&quot;&gt;RCStart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And lastly, because I can&amp;#39;t help myself, here are a few of the things I loved the most about New York this summer:&lt;/p&gt;

&lt;h2&gt;When in NYC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Roerich museum is superb, and also free!&lt;/li&gt;
&lt;li&gt;Cafe Mogador has unsurpassed Moroccan food!&lt;/li&gt;
&lt;li&gt;Washington Square park and Central Park both are delightful&lt;/li&gt;
&lt;li&gt;The Union Square Greenmarket was wild. What a market!&lt;/li&gt;
&lt;li&gt;Dumbo boulders is an outdoor bouldering gym directly under the Manhattan bridge. Cheap, too!&lt;/li&gt;
&lt;li&gt;Manhattan community boathouse has free kayak rentals! That was great on a bluebird hundred degree day.&lt;/li&gt;
&lt;li&gt;The highline is always delightful.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Sep 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2016/09/10/Return-Statement.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/10/Return-Statement.html</guid>
        
        
      </item>
    
      <item>
        <title>Contributing to GHC</title>
        <description>&lt;p&gt;I came to the &lt;a href=&quot;https://www.recurse.com/&quot;&gt;RC&lt;/a&gt; thinking that I would contribute to the Elm compiler... but then abandoned the idea for many reasons of varying validity- but it definitely felt intimidating! A few weeks later I was talking to James, who told me he had made a small contribution to GHC- the Haskell compiler- so over the weekend I ended up for the &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Newcomers&quot;&gt;newcomer page&lt;/a&gt; for GHC. At the bottom of this page was &lt;a href=&quot;https://rawgit.com/gibiansky/4c54f767bf21a6954b23/raw/67c62c5555f40c6fb67b124307725df168201361/exp.html&quot;&gt;this post&lt;/a&gt; which is a walk through of Andrew&amp;#39;s first GHC contribution.&lt;/p&gt;

&lt;p&gt;And you know what, if Andrew can do it, I can do it. (Can and did!) Damn the torpedoes, full speed ahead!&lt;/p&gt;

&lt;p&gt;So in parallel to Andrew&amp;#39;s guide to his first contribution in excruciating detail, here is mine:&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Compiling GHC from the source&lt;/h1&gt;

&lt;p&gt;I followed the newcomer instructions and had &lt;em&gt;surprisingly few&lt;/em&gt; issues getting GHC to compile. It did take a while though! Here&amp;#39;s the rundown:&lt;/p&gt;

&lt;p&gt;I ran:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone --recursive git://github.com/ghc/ghc
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ghc/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cp mk/build.mk.sample mk/build.mk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
All of these worked with little excitement. No news is good news! Then I ran:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and was given the message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Booting libraries/time/
Booting libraries/unix/
Can't exec &quot;aclocal&quot;: No such file or directory at /usr/local/Cellar/autoconf/2.69/share/autoconf/Autom4te/FileUtils.pm line 326.
autoreconf: failed to run aclocal: No such file or directory
Can't exec &quot;aclocal&quot;: No such file or directory at /usr/local/Cellar/autoconf/2.69/share/autoconf/Autom4te/FileUtils.pm line 326.
autoreconf: failed to run aclocal: No such file or directory
Running autoreconf failed at ./boot line 217, &amp;lt;PKGS&amp;gt; line 12.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
The first hit stackoverflow post suggested that I install automake, so I did.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew install automake
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wooh! It worked! Onward!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gave me the message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;checking for version of happy... 1.19.5
checking for alex... no
checking for version of alex...
configure: error: Alex version 3.1.0 or later is required to compile GHC.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
okay, cool, no problem, I ran:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cabal install Alex
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and got the message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;config.status: creating mk/config.h
\--------------------------------------------------------------------
Configure completed successfully.
   Building GHC version  : 8.1.20160724
          Git commit id  : 4036c1f110578f8e2813295116b79a5a06e2bf59
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
Score! Go team!
okay, now to make:&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Update  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t realize this when I originally built GHC but my build would have gone much faster if I had uncommented &lt;code&gt;BuildFlavor = devel2&lt;/code&gt; in the mk/build.mk &lt;em&gt;before&lt;/em&gt; running make.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make -j8 &lt;span class=&quot;c&quot;&gt;# parallelize to at most 8 parallel jobs; adapt to actual number of cpu cores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…wait, how many cores do I have? Quick google search turned up the command: (on osx!)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sysctl -n hw.ncpu
 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well unfortunately I was too excited and ran make before checking how many cores I had… and I didn&amp;#39;t want to interrupt halfway through the build, so I just let it compile...
...and half an hour later had to borrow a laptop charger because I was running down my battery by running at 100% CPU…
About an hour later I took a look at my CPU load:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ghc1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;and found out that, since I was trying to run 8 threads on a 4 core machine, not only were the 8 parallel threads sucking all my CPU but also the OS was taking a ton of CPU to juggle them. Yikes!&lt;/p&gt;

&lt;p&gt;I decided to give it until 7 pm, before pulling the plug to try it again overnight with the right parallelization flag.&lt;/p&gt;

&lt;p&gt;6:47pm: Compilation finished! I was notified when my computer&amp;#39;s fan turned off.&lt;/p&gt;

&lt;p&gt;I checked if the compilation &lt;em&gt;actually&lt;/em&gt; succeeded by running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./inplace/bin/ghc-stage2 —interactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it worked!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./inplace/bin/ghc-stage2 —interactive
GHCi, version 8.1.20160724: http://www.haskell.org/ghc/  :? &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Prelude&amp;gt; &lt;/span&gt;putStrLn &lt;span class=&quot;s2&quot;&gt;&quot;yay!&quot;&lt;/span&gt;
yay!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
Yay! Onward!&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Verifying I can modify the source&lt;/h1&gt;

&lt;p&gt;Okay, so before starting in on the issue I made sure I was set up to see any changes that I made actually propagate through the compiler. The issue I was looking at had to do with the &amp;quot;relevant bindings&amp;quot; provided in a typechecker error message, so that&amp;#39;s where I went to make my toy change.&lt;/p&gt;

&lt;p&gt;First of all, before touching ANYTHING I created a new branch.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b typecheck-variable-shadowing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I also updated the mk/build.mk file as recommended in the newcomers page:&lt;/p&gt;

&lt;p&gt;1) I uncommented &lt;code&gt;BuildFlavor = devel2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) also uncommented &lt;code&gt;stage=2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I had read that GHC had a wiki, so I thought I&amp;#39;d check out the Typechecker entry before diving in, in case it had any helpful insite:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ghc2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Um, nevermind. Diving in!
I got over the the typechecker directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;compiler/typecheck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then used ack (like grep, but with pretty-printing) to find what file was producing the type error in question:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ack &lt;span class=&quot;s2&quot;&gt;&quot;Relevant bindings&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/ghc3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Stellar. I opened that file and made a minimal change- I just changed the word &amp;quot;bindings&amp;quot; to &amp;quot;donuts&amp;quot;. (I opened the typecheck directory in Sublime, and that was pretty convenient. Atom is also has good Haskell support. ) Let&amp;#39;s see if it worked!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..; make fast
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I got this message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;libraries/ghci/ghc.mk:4: libraries/ghci/dist-install/build/.depend-v-dyn.c_asm: No such file or directory
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
compiler/ghc.mk:572: compiler/stage2/build/.depend-v-dyn.haskell: No such file or directory
compiler/ghc.mk:572: compiler/stage2/build/.depend-v-dyn.c_asm: No such file or directory
make[2]: *** No rule to make target `compiler/stage2/build/.depend-v-dyn.c_asm'.  Stop.
make[1]: *** [all_compiler] Error 2
make: *** [all] Error 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
Hmmm, okay. So I&amp;#39;ll try making without the fast flag:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that worked! It took a few minutes, I&amp;#39;m not sure what the issue with make fast was. Okay, let&amp;#39;s see if I can see my change:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;../inplace/bin/ghc-stage2 --interactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/screenshot1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
Yeah! We&amp;#39;re in business!&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Fixing a GHC Bug!&lt;/h1&gt;

&lt;p&gt;Okay, so I worked on &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/12177&quot;&gt;this bug&lt;/a&gt;. Here&amp;#39;s the premise: when you write a function you can leave a hole (just an underscore _ ) and when you compile GHC will throw an error that will tell you what the type of that hole is. So if you type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kt&quot;&gt;Prelude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ghci will tell you:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;interactive&amp;gt;:2:18: error:
    • Found hole: _ :: [Char]
    • In the second argument of ‘(++)’, namely ‘_’
      In the expression: &quot;Hello &quot; ++ _
      In the expression: \ x -&amp;gt; &quot;Hello &quot; ++ _
    • Relevant bindings include
        x :: t (bound at &amp;lt;interactive&amp;gt;:2:2)
        it :: t -&amp;gt; [Char] (bound at &amp;lt;interactive&amp;gt;:2:1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
GHC can infer that the hole needs to have type [Char]. Cool, that could be helpful. So now the bug was that if we have a shadowed variable, then GHC was reporting the outer binding as a &amp;quot;Relevant binding&amp;quot; even though it couldn&amp;#39;t possibly be relevant as it was shadowed. That probably didn&amp;#39;t make very much sense, so here&amp;#39;s an example. I&amp;#39;m going to show what ghci reports, and highlight the offending line in blue:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshot2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;That line in blue is the binding for the outside (left-most) variable &amp;#39;x&amp;#39; which we can never access in the inner scope because we re-bind x in that inner context. So my task was to get the typechecker to remove that line in blue.&lt;/p&gt;

&lt;p&gt;So I don&amp;#39;t really have a good summary of what I did next- but in short, I poked around the typechecker for a few hours, just trying to figure out how things work. It took some time to get accustomed to the abbreviations, &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Abbreviations&quot;&gt;this source&lt;/a&gt; has some of them. I also spent some time tracking down what types things were really- for instance, I eventually found that the structure that held the bindings was a [TcIdBinder], but to know that I had to ack and dig around files that held definitions.&lt;/p&gt;

&lt;p&gt;The structure I ended up working with was a [TcIdBinder], and a TcIdBinder is one of two things- a thing which has an &amp;quot;Id&amp;quot; or a thing that has a &amp;quot;Name&amp;quot;. By looking at a method that manipulated TcIdBinders I saw there was a method call to change Id&amp;#39;s into Name&amp;#39;s.&lt;/p&gt;

&lt;p&gt;So I just checked to see if Name&amp;#39;s were shadowed.&lt;/p&gt;

&lt;p&gt;Except that didn&amp;#39;t work.&lt;/p&gt;

&lt;p&gt;Some debugging later, I looked into where Name&amp;#39;s were defined, and found the thing I really wanted to be comparing was the OccName (occurrence name). A few accessor functions later I had a working solution!&lt;/p&gt;

&lt;p&gt;If you want to more concretely see what I mean, &lt;a href=&quot;https://phabricator.haskell.org/D2434&quot;&gt;here&amp;#39;s the patch&lt;/a&gt; and you can scroll all the way down to see the code diffs.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Adding a test&lt;/h1&gt;

&lt;p&gt;Okay, now to add test cases!
Following the &amp;#39;&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Building/RunningTests/Adding&quot;&gt;adding a test&lt;/a&gt;&amp;#39; document in GHC, I make two new files under testsuite/tests/typecheck/should_fail:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;T12117.hs       &amp;lt;-   code goes in here
T12117.stderr   &amp;lt;-   error messages we hope to see go here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also modified the file tests/typecheck/should_fail/all.T by adding the line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;test('T12177', normal, compile_fail, [''])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cool. Then I ran all the typecheck tests by going down to the typecheck directory and just running&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also used&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;THREADS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4      -- or however many processors you actually have
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;T12177
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to only run the test that I just added. All tests passed, so I was ready to make a patch!&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Making a patch&lt;/h1&gt;

&lt;p&gt;I just followed the &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/WorkingConventions/FixingBugs&quot;&gt;instructions&lt;/a&gt; about contributing to GHC. In reality making a patch took a lot more fiddling then the straightforward version below, but here&amp;#39;s the summary:&lt;/p&gt;

&lt;p&gt;I set up an account on &lt;a href=&quot;https://phabricator.haskell.org/&quot;&gt;phabricator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I set up arcanist, by first heading to a directory where I put various software that I need to clone, and then running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/phacility/libphutil.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/phacility/arcanist.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/arcanist/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;
I committed all my changes, trying to adhere to the git commit guideline.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add -A
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Relevant Bindings no longer reports shadowed bindings (fixes #12176)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Okay, and then I just ran &amp;quot;arc diff&amp;quot; in the root directory...
And it failed, complaining about linting issues. I fixed them, readded the files to git and updated the commit, and reran arcanist.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add -A
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit --amend
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;arc diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it! Arcanist created &lt;a href=&quot;https://phabricator.haskell.org/D2434&quot;&gt;a new entry&lt;/a&gt; on Phabricator for me.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jul 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2016/07/10/Contributing-GHC.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/10/Contributing-GHC.html</guid>
        
        
      </item>
    
  </channel>
</rss>
